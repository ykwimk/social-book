{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from 'redux';\nvar initialState = {\n  user: _objectSpread({}, user.initialState),\n  post: _objectSpread({}, post.initialState)\n}; // (이전상태, 액션) => 다음상태\n\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log(HYDRATE, action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/robin/www/social-book/client/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,IAAMC,YAAY,GAAG;AACnBH,EAAAA,IAAI,oBACCA,IAAI,CAACG,YADN,CADe;AAInBF,EAAAA,IAAI,oBACCA,IAAI,CAACE,YADN;AAJe,CAArB,C,CASA;;AACA,IAAMC,WAAW,GAAGF,eAAe,CAAC;AAClCG,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC7B,YAAOA,MAAM,CAACC,IAAd;AACE,WAAKT,OAAL;AACEU,QAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ,EAAqBQ,MAArB;AACA,+CACKD,KADL,GAEKC,MAAM,CAACI,OAFZ;;AAIF;AACE,eAAOL,KAAP;AARJ;AAUD,GAZiC;AAalCN,EAAAA,IAAI,EAAJA,IAbkC;AAclCC,EAAAA,IAAI,EAAJA;AAdkC,CAAD,CAAnC;AAiBA,eAAeG,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from 'redux';\n\nconst initialState = {\n  user: {\n    ...user.initialState\n  },\n  post: {\n    ...post.initialState\n  }\n}\n\n// (이전상태, 액션) => 다음상태\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch(action.type) {\n      case HYDRATE:\n        console.log(HYDRATE, action)\n        return {\n          ...state,\n          ...action.payload\n        }\n      default:\n        return state\n    }\n  },\n  user,\n  post,\n})\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}