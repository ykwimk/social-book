{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 0,\n    user: {\n      id: 0,\n      nickname: 'ykwimk'\n    },\n    content: '첫번째 게시물',\n    images: [{\n      src: 'http://lorempixel.com/400/255/cats/'\n    }, {\n      src: 'http://lorempixel.com/400/255/abstract/'\n    }, {\n      src: 'http://lorempixel.com/400/255/city/'\n    }],\n    comments: [{\n      user: {\n        nickname: 'zmzmzm'\n      },\n      content: '댓글입니다.'\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n};\nconst ADD_POST = 'ADD_POST';\nexport const addPost = {\n  type: ADD_POST\n};\nconst dummyPost = {\n  id: 2,\n  content: '더미데이터 입니다.',\n  user: {\n    id: 1,\n    nickname: 'dummy'\n  },\n  images: [],\n  comments: []\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"sources":["/Users/robin/www/social-book/client/reducers/post.js"],"names":["initialState","mainPosts","id","user","nickname","content","images","src","comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,SANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AAAEC,MAAAA,GAAG,EAAE;AAAP,KADM,EAEN;AAAEA,MAAAA,GAAG,EAAE;AAAP,KAFM,EAGN;AAAEA,MAAAA,GAAG,EAAE;AAAP,KAHM,CAPV;AAYEC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ;AAZZ,GADS,CADe;AAwB1BI,EAAAA,UAAU,EAAE,EAxBc;AAyB1BC,EAAAA,SAAS,EAAE;AAzBe,CAArB;AA4BP,MAAMC,QAAQ,GAAG,UAAjB;AAEA,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,IAAI,EAAEF;AADe,CAAhB;AAGP,MAAMG,SAAS,GAAG;AAChBZ,EAAAA,EAAE,EAAE,CADY;AAEhBG,EAAAA,OAAO,EAAE,YAFO;AAGhBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHU;AAOhBE,EAAAA,MAAM,EAAE,EAPQ;AAQhBE,EAAAA,QAAQ,EAAE;AARM,CAAlB;AAWA,OAAO,MAAMO,OAAO,GAAG,CAACC,KAAK,GAAGhB,YAAT,EAAuBiB,MAAvB,KAAkC;AACvD,UAAOA,MAAM,CAACJ,IAAd;AACE,SAAKF,QAAL;AACE,6CACKK,KADL;AAEEf,QAAAA,SAAS,EAAE,CACTa,SADS,EAET,GAAGE,KAAK,CAACf,SAFA,CAFb;AAMES,QAAAA,SAAS,EAAE;AANb;;AAQF;AACE,aAAOM,KAAP;AAXJ;AAaD,CAdM;AAgBP,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  mainPosts: [\n    {\n      id: 0,\n      user: {\n        id: 0,\n        nickname: 'ykwimk',\n      },\n      content: '첫번째 게시물',\n      images: [\n        { src: 'http://lorempixel.com/400/255/cats/' },\n        { src: 'http://lorempixel.com/400/255/abstract/' },\n        { src: 'http://lorempixel.com/400/255/city/' }\n      ],\n      comments: [\n        {\n          user: {\n            nickname: 'zmzmzm'\n          },\n          content: '댓글입니다.'\n        }\n      ]\n    }\n  ],\n  imagePaths: [],\n  postAdded: false,\n}\n\nconst ADD_POST = 'ADD_POST'\n\nexport const addPost = {\n  type: ADD_POST\n}\nconst dummyPost = {\n  id: 2,\n  content: '더미데이터 입니다.',\n  user: {\n    id: 1,\n    nickname: 'dummy',\n  },\n  images: [],\n  comments: [],\n}\n\nexport const reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case ADD_POST:\n      return {\n        ...state,\n        mainPosts: [\n          dummyPost,\n          ...state.mainPosts,\n        ],\n        postAdded: true,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}